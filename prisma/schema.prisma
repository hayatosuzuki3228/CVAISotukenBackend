generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

model QualificationMaster {
    id Int @id @default(autoincrement())
    name String
    studentqualifications StudentQualification[]
}

model ClassMaster {
    id Int @id @default(autoincrement())
    name String
    abbreviation String
    student StudentProfile[]
    companyMessage CompanyMessageTo[]
}

model Student {
    id Int @id @default(autoincrement())
    email String @unique
    password String
    active Boolean @default(true)
    profile StudentProfile?
    qualifications StudentQualification[]
    bookmarks StudentBookmark[]
}

model StudentProfile {
    id Int @id
    name String?
    furigana String?
    classId Int
    gender String? @db.VarChar(1)
    birthday DateTime? @db.Date
    residence String?
    graduation_year Int? @db.Year 
    work_location String?
    student Student @relation(fields: [id], references: [id])
    class ClassMaster @relation(fields: [classId], references: [id])
}

model StudentQualification {
    id Int @id @default (autoincrement())
    userId Int
    qualificationId Int
    student Student @relation(fields: [userId], references: [id])
    qualificationmaster QualificationMaster @relation(fields: [qualificationId], references: [id])
}

model StudentBookmark {
    id String @id @default(uuid())
    userId Int
    companyId Int
    addedAt DateTime @default(now())
    student Student @relation(fields: [userId], references: [id])
    company Company @relation(fields: [companyId], references: [id])
}

model Company {
    id Int @id @default(autoincrement())
    email String
    password String
    active Boolean @default(true)
    profile CompanyProfile?
    messsages CompanyMessage[]
    bookmarks StudentBookmark[]
}

model CompanyProfile {
    id Int @id @default(autoincrement())
    companyId Int @unique
    company Company @relation(fields: [companyId], references: [id])
    code Int?
    name String?
    website String?
    furigana String?
    category String?
    detail String?
    office String?
    representative String?
    foundation_date String?
    capital String?
    amount_of_sales String?
    number_of_employees String?
    phone_number String?
    email String?
    recruitment_numbers String?
    this_year_graduate_recruitment_results String?
    last_year_graduate_recruitment_results String?
    recruitment_grade String?
    qualification String?
    ideal_candidate_profile String?
    work_location String?
    working_hours String?
    holiday String?
    four_year_course_basic_salary String?
    four_year_course_allowances String?
    four_year_course_salary_total String?
    three_year_course_basic_salary String?
	three_year_course_allowances String?
    three_year_course_salary_total String?
    two_year_course_basic_salary String?
    two_year_course_allowances String?
    two_year_course_salary_total String?
    one_year_course_basic_salary String?
    one_year_course_allowances String?
    one_year_course_salary_total String?
    others String?
    allowances String?
    welfare String?
    corporate_philosophy String?
    appeal String?
}

model CompanyMessage {
    id String @id @default(uuid())
    companyId Int
    postAt DateTime @default(now())
    updateAt DateTime @updatedAt
    company Company @relation(fields: [companyId], references: [id])
    published Boolean @default(true)
    title String
    content String
    link String?
    class CompanyMessageTo[]
}

model CompanyMessageTo {
    id String @id @default(uuid())
    companyMessageId String
    classId Int
    companyMessage CompanyMessage @relation(fields: [companyMessageId], references: [id])
    class ClassMaster @relation(fields: [classId], references: [id])
}

model Admin {
    id Int @id @default(autoincrement())
    email String
    password String
    active Boolean @default(true)
}